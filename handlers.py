from aiogram import Dispatcher, types, Bot, Router, F
from aiogram.filters import CommandStart, StateFilter, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import aiosqlite
import re
from LOLZTEAM.API import Forum, Market
import config
from config import token, secret, supp
from keyboards import get_admin_keyboard, get_user_keyboard, inline_keyboard, ApplicationActionCallback

market = Market(token=token, language="en")
forum = Forum(token=token, language="en")

class ApplicationForm(StatesGroup):
    profile_link = State()
  

router = Router()

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_ids = set()
async def init_db():
    async with aiosqlite.connect('bot_database.db') as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS applications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            profile_link TEXT,
            status TEXT DEFAULT 'pending'
        )''')
        await db.execute('''CREATE TABLE IF NOT EXISTS blocked_users (
            user_id INTEGER PRIMARY KEY
        )''')
        await db.commit()

async def is_blocked(user_id):
    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT * FROM blocked_users WHERE user_id = ?', (user_id,)) as cursor:
            return await cursor.fetchone() is not None

@router.message(Command('cleardb'))      
async def clear_db_command(message: types.Message):
     if message.from_user.id in config.ADMIN_IDS:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('bot_database.db') as db:
            await db.execute("DELETE FROM applications")
            await db.execute("DELETE FROM sqlite_sequence WHERE name='applications'")  # –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
            await db.commit()
        await message.answer("Database succesfully deleted")

@router.message(F.text == 'üìë –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∏')
async def list_ads_command(message: types.Message):
    if message.from_user.id in config.ADMIN_IDS:
        async with aiosqlite.connect('bot_database.db') as db:
            async with db.execute("SELECT profile_link FROM applications WHERE status = 'approved'") as cursor:
                rows = await cursor.fetchall()
    
        if not rows:
            await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        ad_list = "\n".join(f"{i + 1}. {row[0]}" for i, row in enumerate(rows))
        await message.answer(f"–°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n{ad_list}")


is_bot_active = False
@router.message(Command('turnoff'))
async def disabled(message: types.Message):
    if message.from_user.id in config.ADMIN_IDS:
        global is_bot_active
        is_bot_active = False
        await message.answer("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")

@router.message(Command('turnon'))
async def enabled(message: types.Message, command: CommandObject):
    
    if message.from_user.id in config.ADMIN_IDS:
        args1 = command.args
        if not args1:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–∫—É–ø–∫–∏.")
            return
        if args1.isdigit():
            try:
                config.price_id = args1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                    
            except ValueError:
                await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            await message.answer(f"–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω! –¶–µ–Ω–∞ —Å–∫—É–ø–∫–∏: {config.price_id}")
            async with aiosqlite.connect('bot_database.db') as db:
                is_bot_active = True
                await db.execute("DELETE FROM applications")
                await db.execute("DELETE FROM sqlite_sequence WHERE name='applications'")  # –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
                await db.commit()
                await message.answer("Database succesfully deleted")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")

@router.message(Command('price'))
async def set_price(message: types.Message, command: CommandObject):
    if message.from_user.id in config.ADMIN_IDS:
        args1 = command.args
        if not args1:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É.")
            return
        if args1.isdigit():
            try:
                config.price_id = args1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ          
            except ValueError:
                await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            await message.answer(config.price_id)
        else:
            await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@router.message(Command('pay'))
async def pay_command(message: types.Message, bot: Bot, command: CommandObject):
    print(f"Initial value of price_id: {config.price_id}")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    async with aiosqlite.connect('bot_database.db') as db:
        if message.from_user.id in config.ADMIN_IDS:
            args = command.args

            if not args:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å—Ç—Ä–æ–∫–∏.")
                return
            if args.isdigit():
                try:
                    app_id = int(args)
                except ValueError:
                    await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                    return

                async with db.execute('SELECT profile_link FROM applications WHERE id = ?', (app_id,)) as cursor:
                    url_row = await cursor.fetchone()
                    if url_row:
                        url = url_row[0]
                        print(f"Extracted URL: {url}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                        matc = re.search(r'threads/(\d+)', url)
                        if matc:
                            thread_i = matc.group(1)
                            response = forum.posts.list(thread_i)
                            data = response.json()
                            print(f"Forum response data: {data}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

                            if 'posts' in data and data['posts']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç—ã –µ—Å—Ç—å
                                poster_id = data['posts'][0].get('poster_user_id')
                                profile_link = url
                                
                                print(f"Using price_id: {config.price_id}")  # –í—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                                # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π price_id
                                await db.execute('UPDATE applications SET status = "approved" WHERE id = ?', (app_id,))
                                response = market.payments.transfer(
                                    user_id=poster_id, amount=config.price_id, currency="rub", comment=f"–í—ã–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{app_id}" ,secret_answer=secret
                                )
                                if response.status_code == 200:  # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                                    await message.reply(response.json())
                                    await message.reply(f"Profile Link: {profile_link}")

                                    async with db.execute('SELECT user_id FROM applications WHERE id = ?', (app_id,)) as cursor:
                                        row = await cursor.fetchone()
                                        user_id = row[0]

                                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É
                                    await bot.send_message(user_id, f"–í–∞—à –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! (ID: {app_id})")
                            else:
                                await message.reply("No posts found in response.")
                        else:
                            await message.reply("Invalid URL format.")
                    else:
                        await message.reply("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await db.commit()


@router.message(Command('info'))
async def get_info(message: types.Message, db):
    if message.from_user.id in config.ADMIN_IDS:
        async with aiosqlite.connect('bot_database.db') as db: 
            args = message.get_args()

            if not args:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å—Ç—Ä–æ–∫–∏.")
                return

            try:
                app_id = int(args)
            except ValueError:
                await message.reply("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

            async with db.execute('SELECT * FROM applications WHERE id = ?', (app_id,)) as cursor:
                applications = await cursor.fetchall()
                if not applications:
                    await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
                    return

                for app in applications:
                    keyboard = InlineKeyboardMarkup()
                    approve_button = InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app[0]}")
                    reject_button = InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app[0]}")
                    block_button = InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{app[0]}")
                    keyboard.add(approve_button, reject_button, block_button)

                    await message.reply(
                        f"ID –∑–∞—è–≤–∫–∏: {app[0]}\nTelegram: {app[2]}\n–°—Ç–∞—Ç—É—Å: {app[3]}\nTG ID: {app[1]}",
                        reply_markup=keyboard)





@router.message(CommandStart())
async def start_command(message: types.Message):
    user_ids.add(message.from_user.id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    if is_bot_active == True:
        if message.from_user.id in config.ADMIN_IDS:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ —Å–∫—É–ø–∫–∏: {config.price_id} –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
        else:
  
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_keyboard())
    if is_bot_active == False:
        if message.from_user.id in config.ADMIN_IDS:
            await message.answer("!!!!!–ë–û–¢ –í–´–ö–õ–Æ–ß–ï–ù!!!!! –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())
        else:
            await message.answer("–°–∫—É–ø–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


@router.message(F.text == 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')
async def start_application(message: types.Message, state: FSMContext):
    if is_bot_active == True:
        if await is_blocked(message.from_user.id):
            await message.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏.")
            return

        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à:")
        await state.set_state(ApplicationForm.profile_link)
    else:
        await message.reply("–°–∫—É–ø–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


@router.message(StateFilter(ApplicationForm.profile_link))
async def process_profile_link(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()

    async with aiosqlite.connect('bot_database.db') as db:
        cursor = await db.execute('''INSERT INTO applications (user_id, profile_link) 
                                     VALUES (?, ?)''',
                                  (message.from_user.id, message.text))
        application_id = cursor.lastrowid
        await db.commit()

    admin_message = f"üì• –ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞. –ó–∞—è–≤–∫–∞ ID - {application_id}."
    for admin_id in config.ADMIN_IDS:
        await bot.send_message(admin_id, admin_message)

    await message.reply(f"Telegram ID: {message.from_user.id}, {message.from_user.username}\nID –ó–∞—è–≤–∫–∏: {application_id}\n–°—Ç–∞—Ç—É—Å: ‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    await state.clear()

@router.message(F.text == 'üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫')
async def view_active_applications(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT * FROM applications WHERE status = "pending"') as cursor:
            applications = await cursor.fetchall()
            if not applications:
                await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
                return

            for app in applications:
                keyboard_markup = await inline_keyboard()
                await message.answer(
                    f"ID –∑–∞—è–≤–∫–∏: {app[0]}\nTelegram: {app[2]}\n–°—Ç–∞—Ç—É—Å: {app[3]}\nTG ID: {app[1]}",
                    reply_markup=keyboard_markup)


@router.message(F.text == 'üìë –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫')
async def view_closed_applications(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    async with aiosqlite.connect('bot_database.db') as db:
        async with db.execute('SELECT * FROM applications WHERE status IN ("approved", "rejected", "blocked")') as cursor:
            applications = await cursor.fetchall()
            if not applications:
                await message.reply("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫.")
                return

            for app in applications:
                await message.reply(f"ID –∑–∞—è–≤–∫–∏: {app[0]}\nGiveaway Link: {app[2]}\n–°—Ç–∞—Ç—É—Å: {app[3]}")

@router.callback_query(ApplicationActionCallback.filter())
async def handle_decision_callback(callback_query: types.CallbackQuery, callback_data: ApplicationActionCallback):
    action, app_id = callback_query.data.split('_')
    action = callback_data.action
    app_id = callback_data.app_id

    async with aiosqlite.connect('bot_database.db') as db:
        if action == "approve":
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id
            async with db.execute('SELECT user_id FROM applications WHERE id = ?', (app_id,)) as cursor:
                user_id = (await cursor.fetchone())[0]

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ profile_link
            async with db.execute('SELECT profile_link FROM applications WHERE id = ?', (app_id,)) as cursor:
                url_row = await cursor.fetchone()
                
                if url_row:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –∫–æ—Ä—Ç–µ–∂
                    url = url_row[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                    matc = re.search(r'threads/(\d+)', url)
                    
                    if matc:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ thread_id
                        thread_id = matc.group(1)
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º response
                        response = forum.posts.list(thread_id)
                        print(f"–û—Ç–≤–µ—Ç –æ—Ç forum.posts.list: {response}")

                        data = response.json()
                        poster_id = data['posts'][0].get('poster_user_id')
                        profile_link = url

                        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–æ—Ä—É–º–µ
                        take = forum.users.search(username=f"{profile_link}")
                        print(take)
                        # –í—ã–ø–ª–∞—Ç–∞
                        response = market.payments.transfer(
                            user_id=poster_id, 
                            amount=config.price_id, 
                            currency="rub", 
                            comment=f"–í—ã–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{app_id}", 
                            secret_answer="15619740"
                        )
                        response_data = response.json()

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
                        if 'errors' in response_data:
                            await callback_query.bot.send_message(
                                user_id,
                                text=f"ID –ó–∞—è–≤–∫–∏: {app_id}\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data['errors']}\n–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {supp}"
                            )
                            await callback_query.message.edit_text(
                                f"–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{response_data['errors']}"
                            )
                        else:
                            await db.execute('UPDATE applications SET status = "approved" WHERE id = ?', (app_id,))
                            await callback_query.bot.send_message(
                                user_id,
                                text=f"ID –ó–∞—è–≤–∫–∏: {app_id}\n–°—Ç–∞—Ç—É—Å: ‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ!"
                            )
                            await callback_query.message.edit_text(f"–ó–∞—è–≤–∫–∞ {app_id} –æ–¥–æ–±—Ä–µ–Ω–∞.\n{response_data.get('message', '–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')}")
                    else:
                        await db.execute('UPDATE applications SET status = "rejected" WHERE id = ?', (app_id,))
                        # –õ–æ–≥–∏–∫–∞, –µ—Å–ª–∏ thread_id –Ω–µ –Ω–∞–π–¥–µ–Ω
                        await callback_query.bot.send_message(
                            callback_query.from_user.id,
                            text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å thread_id –∏–∑ URL."
                        )
        elif action == "reject":
            await db.execute('UPDATE applications SET status = "rejected" WHERE id = ?', (app_id,))
            async with db.execute('SELECT user_id FROM applications WHERE id = ?', (app_id,)) as cursor:
                user_id = (await cursor.fetchone())[0]

            await callback_query.bot.send_message(
                user_id,
                text=f"ID –ó–∞—è–≤–∫–∏: {app_id}\n–°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ\n–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±–∂–∞–ª–æ–≤–∞–Ω–∏—è - {supp}."
            )
            await callback_query.message.edit_text(f"–ó–∞—è–≤–∫–∞ {app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        elif action == "block":
            await db.execute('UPDATE applications SET status = "blocked" WHERE id = ?', (app_id,))
            async with db.execute('SELECT user_id FROM applications WHERE id = ?', (app_id,)) as cursor:
                user_id = (await cursor.fetchone())[0]

            await db.execute('INSERT INTO blocked_users (user_id) VALUES (?)', (user_id,))

            await callback_query.bot.send_message(
                user_id,
                text="üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã."
            )
            await callback_query.message.edit_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        await db.commit()
